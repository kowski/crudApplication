package pl.lodz.uni.math.crudApplication.Controllers;

import java.rmi.server.UnicastRemoteObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import pl.lodz.uni.math.crudApplication.Repository.StudentJpaRepository;
import pl.lodz.uni.math.crudApplication.Repository.StudentRepository;
import pl.lodz.uni.math.crudApplication.Repository.UniversityJpaRepository;
import pl.lodz.uni.math.crudApplication.Student.Student;
import pl.lodz.uni.math.crudApplication.Student.University;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private StudentRepository studentRepository;
	@Autowired
	private UniversityJpaRepository universityJpaRepo;
	@Autowired
	private StudentJpaRepository studentJpaRepo;

	@GetMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String surname,
			@RequestParam String email, @RequestParam University university) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Student n = new Student();
		n.setName(name);
		n.setSurname(surname);
		n.setEmail(email);
		n.setUniversity(university);
		studentJpaRepo.save(n);
		return "Saved";
	}

	@GetMapping(path = "/add/university")
	public @ResponseBody String addNewUniversity(@RequestParam String name, @RequestParam String city) {
		University u = new University();
		u.setCity(city);
		u.setName(name);
		universityJpaRepo.save(u);
		return "Saved";
	}

	@GetMapping(path = "/all")
	public String getAllUsers(Model model) {
		model.addAttribute("students", studentJpaRepo.findAll());
		return "allstudents";
	}

	@GetMapping(path = "/addstudent")
	public String showForm(Model model) {
		model.addAttribute("student", new Student());
		model.addAttribute("universities", universityJpaRepo.findAll());
		return "addStudent";
	}

	@PostMapping(path = "/addstudent")
	public String add(@ModelAttribute Student student) {
		Student n = new Student();
		n.setName(student.getName());
		n.setSurname(student.getSurname());
		n.setEmail(student.getEmail());
		n.setUniversity(universityJpaRepo.findOne(student.getUniversity().getId()));
		studentJpaRepo.save(n);
		return "redirect:/demo/all";
	}

	@GetMapping(path = "/editstudent")
	public String edit(@RequestParam Integer id, Model model) {
		model.addAttribute("student", studentJpaRepo.getOne(id));
		model.addAttribute("universities", universityJpaRepo.findAll());
		return "editStudent";
	}

	@PostMapping(path = "/editstudent")
	public String saveEdited(@ModelAttribute Student student) {
		studentJpaRepo.save(student);
		return "redirect:/demo/all";
	}

	@GetMapping(path = "/deletestudent")
	public String deleteStudent(@RequestParam Integer id) {
		studentJpaRepo.delete(id);
		return "redirect:/demo/all";
	}
 
}